/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, useStatusBarItem, useDisposable, } from 'reactive-vscode';
import type { Nullable, UseStatusBarItemOptions } from 'reactive-vscode';
export const publisher = "cnjimbo";
export const name = "project-config";
export const version = "1.1.2";
export const displayName = "Project Config";
export const description = "Export current settings to workspace config file ";
export const extensionId = "cnjimbo.project-config";
type Cache<T> = {
    exp: number | null;
    value: T;
    dispose: () => void;
};
const memoize = <TArgs extends any[], TResult>(cache: Map<string, Cache<TResult>>, func: (...args: TArgs) => TResult, keyFunc: ((...args: TArgs) => string) | null, ttl: number | null) => {
    return function callWithMemo(...args: any): TResult {
        const key = keyFunc ? keyFunc(...args) : JSON.stringify({ args });
        const existing = cache.get(key);
        if (existing !== undefined) {
            if (!existing.exp)
                return existing.value;
            if (existing.exp > new Date().getTime()) {
                return existing.value;
            }
        }
        const result = func(...args);
        const target: Cache<TResult> = {
            exp: ttl ? new Date().getTime() + ttl : null,
            value: result,
            dispose: () => {
                cache.delete(key);
            }
        };
        cache.set(key, target);
        useDisposable(target);
        return result;
    };
};
/**
 * Creates a memoized function. The returned function
 * will only execute the source function when no value
 * has previously been computed. If a ttl (milliseconds)
 * is given previously computed values will be checked
 * for expiration before being returned.
 */
export const memo = <TArgs extends any[], TResult>(func: (...args: TArgs) => TResult, options: {
    key?: (...args: TArgs) => string;
    ttl?: number;
} = {}) => {
    return memoize(new Map<string, Cache<TResult>>(), func, options.key ?? null, options.ttl ?? null) as (...args: TArgs) => TResult;
};
export interface CommandsInformation {
    /**
     *  category string by which the command is grouped in the UI
     */
    category?: string;
    /**
     * identifier of the command to execute
     */
    command: string;
    /**
     * title which the command is represented in the UI
     */
    title: string;
    enablement?: string;
    icon?: string;
    shortTitle?: string;
    commandShorthandName?: string;
}
/**
 * Type union of all commands
 */
export type Command = "project-config.manualUpdate" | "project-config.change-annnotations" | "project-config.stop-watch" | "project-config.enableRunOnSave" | "project-config.disableRunOnSave" | "project-config.updateDes" | "project-config.sayHello" | "project-config.sayGoodbye";
/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
    /**
     * Update config now
     * @command `project-config.manualUpdate`
     */
    manualUpdate: "project-config.manualUpdate",
    /**
     * Change annotations
     * @command `project-config.change-annnotations`
     */
    changeAnnnotations: "project-config.change-annnotations",
    /**
     * Stop watch
     * @command `project-config.stop-watch`
     */
    stopWatch: "project-config.stop-watch",
    /**
     * Run On Save: Enable
     * @command `project-config.enableRunOnSave`
     */
    enableRunOnSave: "project-config.enableRunOnSave",
    /**
     * Run On Save: Disable
     * @command `project-config.disableRunOnSave`
     */
    disableRunOnSave: "project-config.disableRunOnSave",
    /**
     * Update demo des
     * @command `project-config.updateDes`
     */
    updateDes: "project-config.updateDes",
    /**
     * SayHello
     * @command `project-config.sayHello`
     */
    sayHello: "project-config.sayHello",
    /**
     * SayGoodbye
     * @command `project-config.sayGoodbye`
     */
    sayGoodbye: "project-config.sayGoodbye",
} satisfies Record<string, Command> as Record<string, Command>;
/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commandsInformation = {
    /**
     * Update config now
     * @command `project-config.manualUpdate`
     */
    "project-config.manualUpdate": { "commandShorthandName": "manualUpdate", "title": "Update config now", "command": "project-config.manualUpdate", "category": "Project Config", "enablement": "s", "icon": "$(zap)", "shortTitle": "shortTitle" },
    /**
     * Change annotations
     * @command `project-config.change-annnotations`
     */
    "project-config.change-annnotations": { "commandShorthandName": "changeAnnnotations", "title": "change annotations", "command": "project-config.change-annnotations", "category": "Project Config" },
    /**
     * Stop watch
     * @command `project-config.stop-watch`
     */
    "project-config.stop-watch": { "commandShorthandName": "stopWatch", "title": "stop watch", "command": "project-config.stop-watch", "category": "Project Config" },
    /**
     * Run On Save: Enable
     * @command `project-config.enableRunOnSave`
     */
    "project-config.enableRunOnSave": { "commandShorthandName": "enableRunOnSave", "title": "Run On Save: Enable", "command": "project-config.enableRunOnSave" },
    /**
     * Run On Save: Disable
     * @command `project-config.disableRunOnSave`
     */
    "project-config.disableRunOnSave": { "commandShorthandName": "disableRunOnSave", "title": "Run On Save: Disable", "command": "project-config.disableRunOnSave" },
    /**
     * Update demo des
     * @command `project-config.updateDes`
     */
    "project-config.updateDes": { "commandShorthandName": "updateDes", "title": "Update demo des", "command": "project-config.updateDes", "category": "Project Demo" },
    /**
     * SayHello
     * @command `project-config.sayHello`
     */
    "project-config.sayHello": { "commandShorthandName": "sayHello", "title": "sayHello", "command": "project-config.sayHello", "category": "Demo", "enablement": "s", "icon": "$(zap)", "shortTitle": "Hello shortTitle" },
    /**
     * SayGoodbye
     * @command `project-config.sayGoodbye`
     */
    "project-config.sayGoodbye": { "commandShorthandName": "sayGoodbye", "title": "sayGoodbye", "command": "project-config.sayGoodbye", "category": "Demo", "enablement": "s", "icon": "$(zap)", "shortTitle": "Bye shortTitle" },
} satisfies Record<Command, CommandsInformation> as Record<Command, CommandsInformation>;
/**
 * Register a command. See `vscode::commands.registerCommand`.
 */
export const useCommand = (commandFullKey: Command, callback: (...args: any[]) => any): void => useReactiveCommand(commandFullKey, callback);
/**
 * Register multiple commands. See `vscode::commands.registerCommand`.
 */
export const useCommands = (commands: Partial<Record<Command, (...args: any[]) => any>>): void => useReactiveCommands(commands);
/**
 * Name type of Logger and OutputChannel
 */
export type LoggerName = typeof name | typeof displayName | typeof extensionId;
/**
 * Creates a logger that writes to the output channel.
 */
export const useLogger = (loggerName: LoggerName = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) => useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
/**
 * @reactive `window.createOutputChannel`
 */
export const useOutputChannel = (outputName: LoggerName = displayName ?? name ?? extensionId) => useReactiveOutputChannel(outputName);
export const putRight = (target: Nullable<string>, curr: string) => target ? ''.concat(curr).concat(target) : curr;
export const putLeft = (target: Nullable<string>, curr: string) => target ? ''.concat(target).concat(curr) : curr;
/**
 * Create a statusBarItem with a commmand id
 */
export const useStatusBarItemFromCommand = memo((command: Command) => {
    const cmd = commandsInformation[command];
    return useStatusBarItem({
        id: cmd.commandShorthandName,
        command: cmd.command,
        name: cmd.command,
        text: putLeft(cmd.icon, cmd.shortTitle ?? cmd.title ?? cmd.commandShorthandName),
        tooltip: putLeft(cmd.category, ":").concat(cmd.title ?? cmd.shortTitle ?? cmd.commandShorthandName)
    });
});
/**
 * Create a option of statusBarItem with a commmand id
 */
export const statusBarItemOption = (command: Command): UseStatusBarItemOptions => {
    const cmd = commandsInformation[command];
    return {
        id: cmd.commandShorthandName,
        command: cmd.command,
        name: cmd.command,
        text: putLeft(cmd.icon, cmd.shortTitle ?? cmd.title ?? cmd.commandShorthandName),
        tooltip: putLeft(cmd.category, ":").concat(cmd.title ?? cmd.shortTitle ?? cmd.commandShorthandName)
    };
};
/**
 * Update config now
 * @command Register a command `project-config.manualUpdate`
 */
export const useCommandManualUpdate = (callback: (...args: any[]) => any) => useCommand(commands.manualUpdate, callback);
/**
 * Change annotations
 * @command Register a command `project-config.change-annnotations`
 */
export const useCommandChangeAnnnotations = (callback: (...args: any[]) => any) => useCommand(commands.changeAnnnotations, callback);
/**
 * Stop watch
 * @command Register a command `project-config.stop-watch`
 */
export const useCommandStopWatch = (callback: (...args: any[]) => any) => useCommand(commands.stopWatch, callback);
/**
 * Run On Save: Enable
 * @command Register a command `project-config.enableRunOnSave`
 */
export const useCommandEnableRunOnSave = (callback: (...args: any[]) => any) => useCommand(commands.enableRunOnSave, callback);
/**
 * Run On Save: Disable
 * @command Register a command `project-config.disableRunOnSave`
 */
export const useCommandDisableRunOnSave = (callback: (...args: any[]) => any) => useCommand(commands.disableRunOnSave, callback);
/**
 * Update demo des
 * @command Register a command `project-config.updateDes`
 */
export const useCommandUpdateDes = (callback: (...args: any[]) => any) => useCommand(commands.updateDes, callback);
/**
 * SayHello
 * @command Register a command `project-config.sayHello`
 */
export const useCommandSayHello = (callback: (...args: any[]) => any) => useCommand(commands.sayHello, callback);
/**
 * SayGoodbye
 * @command Register a command `project-config.sayGoodbye`
 */
export const useCommandSayGoodbye = (callback: (...args: any[]) => any) => useCommand(commands.sayGoodbye, callback);
/**
 * Section Type of `project-config.demo`
 */
export interface Demo {
    /**
     * Used for demo configuration
     */
    "description": string;
}
/**
 * Section Type of `project-config.fileNestingUpdater`
 */
export interface FileNestingUpdater {
    /**
     * Fetch and update the latest config automatically
     */
    "autoUpdate": boolean;
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": string;
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": string;
    /**
     * Should show up the prompt before doing auto update
     */
    "promptOnAutoUpdate": boolean;
    /**
     * The minimal interval for auto update, in minutes
     */
    "autoUpdateInterval": number;
}
/**
 * Section Type of `project-config`
 */
export interface ProjectConfig {
    /**
     *
     */
    "runonsave": {
        /**
       * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
       * @default `undefined`
       */
        'shell'?: string;
        /**
         * @default `[]`
         */
        'commands': {
            /**
       * Command to execute on save.
       * @default `"echo ${file}"`
       */
            'cmd': string;
            /**
             * Regex for matching files to run commands on
             * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
             * e.g.
             * "match": "some\\\\directory\\\\.*"
             * @default `".*"`
             */
            'match': string;
            /**
             * Run command asynchronously.
             * @default `false`
             */
            'isAsync': boolean;
            /**
             * Regex for matching files *not* to run commands on.
             * @default `".*"`
             */
            'notMatch': string;
        }[];
        /**
         * Automatically clear the console on each save before running commands.
         * @default `false`
         */
        'autoClearConsole': boolean;
    };
}
const defaults = {
    /**
     * Config defaults of `project-config.demo`
     */
    "project-config.demo": {
        /**
         * Used for demo configuration
         */
        "description": "default demo string",
    } satisfies Demo as Demo,
    /**
     * Config defaults of `project-config.fileNestingUpdater`
     */
    "project-config.fileNestingUpdater": {
        /**
         * Fetch and update the latest config automatically
         */
        "autoUpdate": true,
        /**
         * The upstream repo you want to update from
         */
        "upstreamRepo": "antfu/vscode-file-nesting-config",
        /**
         * The branch name of upstream repo
         */
        "upstreamBranch": "main",
        /**
         * Should show up the prompt before doing auto update
         */
        "promptOnAutoUpdate": true,
        /**
         * The minimal interval for auto update, in minutes
         */
        "autoUpdateInterval": 4320,
    } satisfies FileNestingUpdater as FileNestingUpdater,
    /**
     * Config defaults of `project-config`
     */
    "project-config": {
        /**
         *
         */
        "runonsave": { "shell": undefined, "commands": [], "autoClearConsole": false },
    } satisfies ProjectConfig as ProjectConfig,
};
/**
 * List of section names.
 */
export type SectionName = keyof typeof defaults;
/**
 * Shorthand of config section name.
 */
export const configs = {
    demo: "project-config.demo",
    fileNestingUpdater: "project-config.fileNestingUpdater",
    projectConfig: "project-config",
} satisfies Record<string, SectionName>;
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfig = memo(<Section extends SectionName>(section: Section) => defineConfigs<typeof defaults[Section]>(section, defaults[section]));
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfigObject = memo(<Section extends SectionName>(section: Section) => defineConfigObject<typeof defaults[Section]>(section, defaults[section]));
/**
 * ConfigObject<Demo> of `project-config.demo`
 */
export const useConfigObjectDemo = () => useConfigObject(configs.demo);
/**
 * ToConfigRefs<Demo> of `project-config.demo`
 */
export const useConfigDemo = () => useConfig(configs.demo);
/**
 * ConfigObject<FileNestingUpdater> of `project-config.fileNestingUpdater`
 */
export const useConfigObjectFileNestingUpdater = () => useConfigObject(configs.fileNestingUpdater);
/**
 * ToConfigRefs<FileNestingUpdater> of `project-config.fileNestingUpdater`
 */
export const useConfigFileNestingUpdater = () => useConfig(configs.fileNestingUpdater);
/**
 * ConfigObject<ProjectConfig> of `project-config`
 */
export const useConfigObjectProjectConfig = () => useConfigObject(configs.projectConfig);
/**
 * ToConfigRefs<ProjectConfig> of `project-config`
 */
export const useConfigProjectConfig = () => useConfig(configs.projectConfig);
/**
// Import reference
import { ConfigurationTarget } from 'vscode'
import * as meta from './generated/meta'
 */
/**
//ConfigObject<ProjectConfig> of `project-config`
//@example projectConfig
const projectConfig = meta.useConfigObjectProjectConfig()
const oldVal:object = projectConfig.runonsave //get value
projectConfig.$update("runonsave", oldVal, ConfigurationTarget.Global) //update value
 */
/**
//ToConfigRefs<ProjectConfig> of `project-config`
//@example projectConfig
const projectConfig = meta.useConfigProjectConfig()
const oldVal:object = projectConfig.runonsave.value //get value
projectConfig.runonsave.update(oldVal, ConfigurationTarget.Global) //update value
 */ 
