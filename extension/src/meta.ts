// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info

import { defineConfigObject, defineConfigs } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.change-annnotations"
  | "project-config.stop-watch"

/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
  /**
   * Update config now
   * @value `project-config.manualUpdate`
   */
  manualUpdate: "project-config.manualUpdate",
  /**
   * change annotations
   * @value `project-config.change-annnotations`
   */
  changeAnnnotations: "project-config.change-annnotations",
  /**
   * stop watch
   * @value `project-config.stop-watch`
   */
  stopWatch: "project-config.stop-watch",
} satisfies Record<string, CommandKey>

/**
 * Type union of all configs
 */
export type ConfigKey = 
  | "xxx"
  | "project-config.test.annotations"
  | "project-config.test.color"
  | "project-config.test.partten"
  | "project-config.test.position"
  | "project-config.fileNestingUpdater.autoUpdate"
  | "project-config.fileNestingUpdater.promptOnAutoUpdate"
  | "project-config.fileNestingUpdater.autoUpdateInterval"
  | "project-config.fileNestingUpdater.upstreamRepo"
  | "project-config.fileNestingUpdater.upstreamBranch"
  | "i18n-ally.disabled"
  | "i18n-ally.autoDetection"
  | "i18n-ally.localesPaths"
  | "i18n-ally.encoding"
  | "i18n-ally.sourceLanguage"
  | "i18n-ally.displayLanguage"
  | "i18n-ally.ignoredLocales"
  | "i18n-ally.keystyle"
  | "i18n-ally.dirStructure"
  | "i18n-ally.annotations"
  | "i18n-ally.annotationInPlace"
  | "i18n-ally.annotationMaxLength"
  | "i18n-ally.annotationDelimiter"
  | "i18n-ally.includeSubfolders"
  | "i18n-ally.fullReloadOnChanged"
  | "i18n-ally.showFlags"
  | "i18n-ally.enabledFrameworks"
  | "i18n-ally.enabledParsers"
  | "i18n-ally.keysInUse"
  | "i18n-ally.sortKeys"
  | "i18n-ally.sortCompare"
  | "i18n-ally.sortLocale"
  | "i18n-ally.preferredDelimiter"
  | "i18n-ally.readonly"
  | "i18n-ally.keepFulfilled"
  | "i18n-ally.localeCountryMap"
  | "i18n-ally.indent"
  | "i18n-ally.disablePathParsing"
  | "i18n-ally.tabStyle"
  | "i18n-ally.namespace"
  | "i18n-ally.pathMatcher"
  | "i18n-ally.languageTagSystem"
  | "i18n-ally.ignoreFiles"
  | "i18n-ally.theme.annotation"
  | "i18n-ally.theme.annotationMissing"
  | "i18n-ally.theme.annotationBorder"
  | "i18n-ally.theme.annotationMissingBorder"
  | "i18n-ally.regex.key"
  | "i18n-ally.regex.usageMatch"
  | "i18n-ally.regex.usageMatchAppend"
  | "i18n-ally.refactor.templates"
  | "i18n-ally.translate.saveAsCandidates"
  | "i18n-ally.translate.fallbackToKey"
  | "i18n-ally.translate.engines"
  | "i18n-ally.translate.parallels"
  | "i18n-ally.translate.promptSource"
  | "i18n-ally.translate.overrideExisting"
  | "i18n-ally.translate.google.apiKey"
  | "i18n-ally.translate.deepl.apiKey"
  | "i18n-ally.translate.baidu.appid"
  | "i18n-ally.translate.baidu.apiSecret"
  | "i18n-ally.translate.deepl.enableLog"
  | "i18n-ally.translate.deepl.useFreeApiEntry"
  | "i18n-ally.translate.libre.apiRoot"
  | "i18n-ally.translate.openai.apiKey"
  | "i18n-ally.translate.openai.apiRoot"
  | "i18n-ally.translate.openai.apiModel"
  | "i18n-ally.usage.scanningIgnore"
  | "i18n-ally.usage.derivedKeyRules"
  | "i18n-ally.frameworks.ruby-rails.scopeRoot"
  | "i18n-ally.parsers.typescript.tsNodePath"
  | "i18n-ally.parsers.typescript.compilerOptions"
  | "i18n-ally.parsers.extendFileExtensions"
  | "i18n-ally.review.enabled"
  | "i18n-ally.review.gutters"
  | "i18n-ally.review.user.name"
  | "i18n-ally.review.user.email"
  | "i18n-ally.review.removeCommentOnResolved"
  | "i18n-ally.editor.preferEditor"
  | "i18n-ally.extract.keygenStrategy"
  | "i18n-ally.extract.keygenStyle"
  | "i18n-ally.extract.keyPrefix"
  | "i18n-ally.extract.keyMaxLength"
  | "i18n-ally.extract.targetPickingStrategy"
  | "i18n-ally.extract.parsers.html"
  | "i18n-ally.extract.parsers.babel"
  | "i18n-ally.extract.autoDetect"
  | "i18n-ally.extract.ignored"
  | "i18n-ally.extract.ignoredByFiles"
  | "i18n-ally.parserOptions"
  | "i18n-ally.defaultNamespace"
  | "i18n-ally.derivedKeyRules"
  | "i18n-ally.filenameMatchRegex"
  | "i18n-ally.fileNamespace"
  | "i18n-ally.keyMatchRegex"
  | "vue-i18n-ally.localesPaths"
  | "vue-i18n-ally.encoding"
  | "vue-i18n-ally.sourceLanguage"
  | "vue-i18n-ally.displayLanguage"
  | "vue-i18n-ally.ignoredLocales"
  | "vue-i18n-ally.keystyle"
  | "vue-i18n-ally.dirStructure"
  | "vue-i18n-ally.annotations"
  | "vue-i18n-ally.annotationMaxLength"
  | "vue-i18n-ally.annotationDelimiter"
  | "vue-i18n-ally.filenameMatchRegex"
  | "vue-i18n-ally.includeSubfolders"
  | "vue-i18n-ally.fullReloadOnChanged"
  | "vue-i18n-ally.sortKeys"
  | "vue-i18n-ally.preferredDelimiter"
  | "vue-i18n-ally.readonly"

/**
 * Types of `root of configuration` registed by `cnjimbo`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   * @key `xxx`
   * @default `true`
   * @type `boolean`
   */
  "xxx": boolean,
}

/**
 * defaults/scope of `root of configuration` registed by `cnjimbo`
 */
const _root = {
/**
 * scope: `root of configuration`
 */
  scope: "",
/**
 * default values under `root of configuration`
 */
  defaults: {
    "xxx": true,
  } satisfies Root,
}

/**
 * config objects of `root of configuration` registed by `cnjimbo`
 */
export const rootConfigObject = defineConfigObject<Root>(
  _root.scope,
  _root.defaults
)


/**
 * configs of `root of configuration` registed by `cnjimbo`
 */
export const rootConfigs = defineConfigs<Root>(
  _root.scope,
  _root.defaults
)


/**
 * Types of `project-config` registed by `cnjimbo`
 */
export interface ProjectConfig {
  /**
   * Enabled project-config inline annotations
   * @key `project-config.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "test.annotations": boolean,
  /**
   * Icon color hex for inline displaying
   * @key `project-config.test.color`
   * @default `"auto"`
   * @type `string`
   */
  "test.color": string,
  /**
   * Icon color hex for inline displaying
   * @key `project-config.test.partten`
   * @default `["src /**\/*","docs /**\/*"]`
   * @type `array`
   */
  "test.partten": string[],
  /**
   * Position the icon before or after the icon name
   * @key `project-config.test.position`
   * @default `"before"`
   * @type `string`
   */
  "test.position": ("after" | "before"),
  /**
   * Fetch and update the latest config automatically
   * @key `project-config.fileNestingUpdater.autoUpdate`
   * @default `true`
   * @type `boolean`
   */
  "fileNestingUpdater.autoUpdate": boolean,
  /**
   * Should show up the prompt before doing auto update
   * @key `project-config.fileNestingUpdater.promptOnAutoUpdate`
   * @default `true`
   * @type `boolean`
   */
  "fileNestingUpdater.promptOnAutoUpdate": boolean,
  /**
   * The minimal interval for auto update, in minutes
   * @key `project-config.fileNestingUpdater.autoUpdateInterval`
   * @default `4320`
   * @type `number`
   */
  "fileNestingUpdater.autoUpdateInterval": number,
  /**
   * The upstream repo you want to update from
   * @key `project-config.fileNestingUpdater.upstreamRepo`
   * @default `"antfu/vscode-file-nesting-config"`
   * @type `string`
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * The branch name of upstream repo
   * @key `project-config.fileNestingUpdater.upstreamBranch`
   * @default `"main"`
   * @type `string`
   */
  "fileNestingUpdater.upstreamBranch": string,
}

/**
 * defaults/scope of `project-config` registed by `cnjimbo`
 */
const _projectConfig = {
/**
 * scope: `project-config`
 */
  scope: "project-config",
/**
 * default values under `project-config`
 */
  defaults: {
    "test.annotations": true,
    "test.color": "auto",
    "test.partten": ["src /**/*","docs /**/*"],
    "test.position": "before",
    "fileNestingUpdater.autoUpdate": true,
    "fileNestingUpdater.promptOnAutoUpdate": true,
    "fileNestingUpdater.autoUpdateInterval": 4320,
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    "fileNestingUpdater.upstreamBranch": "main",
  } satisfies ProjectConfig,
}

/**
 * config objects of `project-config` registed by `cnjimbo`
 */
export const projectConfigConfigObject = defineConfigObject<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)


/**
 * configs of `project-config` registed by `cnjimbo`
 */
export const projectConfigConfigs = defineConfigs<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)


/**
 * Types of `project-config.test` registed by `cnjimbo`
 */
export interface Test {
  /**
   * Enabled project-config inline annotations
   * @key `project-config.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "annotations": boolean,
  /**
   * Icon color hex for inline displaying
   * @key `project-config.test.color`
   * @default `"auto"`
   * @type `string`
   */
  "color": string,
  /**
   * Icon color hex for inline displaying
   * @key `project-config.test.partten`
   * @default `["src /**\/*","docs /**\/*"]`
   * @type `array`
   */
  "partten": string[],
  /**
   * Position the icon before or after the icon name
   * @key `project-config.test.position`
   * @default `"before"`
   * @type `string`
   */
  "position": ("after" | "before"),
}

/**
 * defaults/scope of `project-config.test` registed by `cnjimbo`
 */
const _test = {
/**
 * scope: `project-config.test`
 */
  scope: "project-config.test",
/**
 * default values under `project-config.test`
 */
  defaults: {
    "annotations": true,
    "color": "auto",
    "partten": ["src /**/*","docs /**/*"],
    "position": "before",
  } satisfies Test,
}

/**
 * config objects of `project-config.test` registed by `cnjimbo`
 */
export const testConfigObject = defineConfigObject<Test>(
  _test.scope,
  _test.defaults
)


/**
 * configs of `project-config.test` registed by `cnjimbo`
 */
export const testConfigs = defineConfigs<Test>(
  _test.scope,
  _test.defaults
)


/**
 * Types of `project-config.fileNestingUpdater` registed by `cnjimbo`
 */
export interface FileNestingUpdater {
  /**
   * Fetch and update the latest config automatically
   * @key `project-config.fileNestingUpdater.autoUpdate`
   * @default `true`
   * @type `boolean`
   */
  "autoUpdate": boolean,
  /**
   * Should show up the prompt before doing auto update
   * @key `project-config.fileNestingUpdater.promptOnAutoUpdate`
   * @default `true`
   * @type `boolean`
   */
  "promptOnAutoUpdate": boolean,
  /**
   * The minimal interval for auto update, in minutes
   * @key `project-config.fileNestingUpdater.autoUpdateInterval`
   * @default `4320`
   * @type `number`
   */
  "autoUpdateInterval": number,
  /**
   * The upstream repo you want to update from
   * @key `project-config.fileNestingUpdater.upstreamRepo`
   * @default `"antfu/vscode-file-nesting-config"`
   * @type `string`
   */
  "upstreamRepo": string,
  /**
   * The branch name of upstream repo
   * @key `project-config.fileNestingUpdater.upstreamBranch`
   * @default `"main"`
   * @type `string`
   */
  "upstreamBranch": string,
}

/**
 * defaults/scope of `project-config.fileNestingUpdater` registed by `cnjimbo`
 */
const _fileNestingUpdater = {
/**
 * scope: `project-config.fileNestingUpdater`
 */
  scope: "project-config.fileNestingUpdater",
/**
 * default values under `project-config.fileNestingUpdater`
 */
  defaults: {
    "autoUpdate": true,
    "promptOnAutoUpdate": true,
    "autoUpdateInterval": 4320,
    "upstreamRepo": "antfu/vscode-file-nesting-config",
    "upstreamBranch": "main",
  } satisfies FileNestingUpdater,
}

/**
 * config objects of `project-config.fileNestingUpdater` registed by `cnjimbo`
 */
export const fileNestingUpdaterConfigObject = defineConfigObject<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)


/**
 * configs of `project-config.fileNestingUpdater` registed by `cnjimbo`
 */
export const fileNestingUpdaterConfigs = defineConfigs<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)


/**
 * Types of `i18n-ally` registed by `cnjimbo`
 */
export interface I18nAlly {
  /**
   * %config.disabled%
   * @key `i18n-ally.disabled`
   * @default `false`
   * @type `boolean`
   */
  "disabled": boolean,
  /**
   * %config.auto_detection%
   * @key `i18n-ally.autoDetection`
   * @default `true`
   * @type `boolean`
   */
  "autoDetection": boolean,
  /**
   * %config.locales_paths%
   * @key `i18n-ally.localesPaths`
   * @default `undefined`
   * @type `string,array`
   */
  "localesPaths": (string | string[] | undefined),
  /**
   * %config.encoding%
   * @key `i18n-ally.encoding`
   * @default `"utf-8"`
   * @type `string`
   */
  "encoding": string,
  /**
   * %config.source_language%
   * @key `i18n-ally.sourceLanguage`
   * @default `undefined`
   * @type `string`
   */
  "sourceLanguage": (string | undefined),
  /**
   * %config.display_language%
   * @key `i18n-ally.displayLanguage`
   * @default `undefined`
   * @type `string`
   */
  "displayLanguage": (string | undefined),
  /**
   * %config.ignored_locales%
   * @key `i18n-ally.ignoredLocales`
   * @default `undefined`
   * @type `array`
   */
  "ignoredLocales": (unknown[] | undefined),
  /**
   * %config.keystyle%
   * @key `i18n-ally.keystyle`
   * @default `undefined`
   * @type `string`
   */
  "keystyle": ("auto" | "nested" | "flat" | undefined),
  /**
   * %config.dir_structure%
   * @key `i18n-ally.dirStructure`
   * @default `undefined`
   * @type `string`
   */
  "dirStructure": ("auto" | "file" | "dir" | undefined),
  /**
   * %config.annotations%
   * @key `i18n-ally.annotations`
   * @default `true`
   * @type `boolean`
   */
  "annotations": boolean,
  /**
   * %config.annotation_in_place%
   * @key `i18n-ally.annotationInPlace`
   * @default `true`
   * @type `boolean`
   */
  "annotationInPlace": boolean,
  /**
   * %config.annotation_max_length%
   * @key `i18n-ally.annotationMaxLength`
   * @default `40`
   * @type `number`
   */
  "annotationMaxLength": number,
  /**
   * %config.annotation_delimiter%
   * @key `i18n-ally.annotationDelimiter`
   * @default `"·"`
   * @type `string`
   */
  "annotationDelimiter": string,
  /**
   * %config.include_subfolders%
   * @key `i18n-ally.includeSubfolders`
   * @default `true`
   * @type `boolean`
   */
  "includeSubfolders": boolean,
  /**
   * %config.full_reload_on_changed%
   * @key `i18n-ally.fullReloadOnChanged`
   * @default `false`
   * @type `boolean`
   */
  "fullReloadOnChanged": boolean,
  /**
   * %config.show_flags%
   * @key `i18n-ally.showFlags`
   * @default `true`
   * @type `boolean`
   */
  "showFlags": boolean,
  /**
   * %config.enabled_frameworks%
   * @key `i18n-ally.enabledFrameworks`
   * @default `undefined`
   * @type `array`
   */
  "enabledFrameworks": (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined),
  /**
   * %config.enabled_parsers%
   * @key `i18n-ally.enabledParsers`
   * @default `undefined`
   * @type `array`
   */
  "enabledParsers": (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined),
  /**
   * %config.keys_in_use%
   * @key `i18n-ally.keysInUse`
   * @default `undefined`
   * @type `array`
   */
  "keysInUse": (string[] | undefined),
  /**
   * %config.sort_keys%
   * @key `i18n-ally.sortKeys`
   * @default `false`
   * @type `boolean`
   */
  "sortKeys": boolean,
  /**
   * %config.sort_compare%
   * @key `i18n-ally.sortCompare`
   * @default `"binary"`
   * @type `string`
   */
  "sortCompare": ("binary" | "locale"),
  /**
   * %config.sort_locale%
   * @key `i18n-ally.sortLocale`
   * @default `undefined`
   * @type `string`
   */
  "sortLocale": (string | undefined),
  /**
   * %config.preferred_delimiter%
   * @key `i18n-ally.preferredDelimiter`
   * @default `"-"`
   * @type `string`
   */
  "preferredDelimiter": string,
  /**
   * %config.readonly%
   * @key `i18n-ally.readonly`
   * @default `false`
   * @type `boolean`
   */
  "readonly": boolean,
  /**
   * %config.keep_fulfill%
   * @key `i18n-ally.keepFulfilled`
   * @default `false`
   * @type `boolean`
   */
  "keepFulfilled": boolean,
  /**
   * %config.locale_country_map%
   * @key `i18n-ally.localeCountryMap`
   * @default `{}`
   * @type `object`
   */
  "localeCountryMap": Record<string, unknown>,
  /**
   * %config.indent%
   * @key `i18n-ally.indent`
   * @default `2`
   * @type `number`
   */
  "indent": number,
  /**
   * %config.disable_path_parsing%
   * @key `i18n-ally.disablePathParsing`
   * @default `false`
   * @type `boolean`
   */
  "disablePathParsing": boolean,
  /**
   * %config.tab_style%
   * @key `i18n-ally.tabStyle`
   * @default `"space"`
   * @type `string`
   */
  "tabStyle": ("space" | "tab"),
  /**
   * %config.namespace%
   * @key `i18n-ally.namespace`
   * @default `undefined`
   * @type `boolean`
   */
  "namespace": (boolean | undefined),
  /**
   * %config.path_matcher%
   * @key `i18n-ally.pathMatcher`
   * @default `undefined`
   * @type `string`
   */
  "pathMatcher": (string | undefined),
  /**
   * %config.language_tag_system%
   * @key `i18n-ally.languageTagSystem`
   * @default `"bcp47"`
   * @type `string`
   */
  "languageTagSystem": ("bcp47" | "legacy" | "none"),
  /**
   * %config.ignore_files%
   * @key `i18n-ally.ignoreFiles`
   * @default `undefined`
   * @type `array`
   */
  "ignoreFiles": (unknown[] | undefined),
  /**
   * 
   * @key `i18n-ally.theme.annotation`
   * @default `"rgba(153, 153, 153, .8)"`
   * @type `string`
   */
  "theme.annotation": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissing`
   * @default `"rgba(153, 153, 153, .3)"`
   * @type `string`
   */
  "theme.annotationMissing": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  "theme.annotationBorder": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissingBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  "theme.annotationMissingBorder": string,
  /**
   * %config.regex_key%
   * @key `i18n-ally.regex.key`
   * @default `undefined`
   * @type `string`
   */
  "regex.key": (string | undefined),
  /**
   * %config.regex_usage_match%
   * @key `i18n-ally.regex.usageMatch`
   * @default `undefined`
   * @type `array`
   */
  "regex.usageMatch": (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   * @key `i18n-ally.regex.usageMatchAppend`
   * @default `undefined`
   * @type `array`
   */
  "regex.usageMatchAppend": (string[] | undefined),
  /**
   * %config.refactor_templates%
   * @key `i18n-ally.refactor.templates`
   * @default `undefined`
   * @type `array`
   */
  "refactor.templates": ({ 'source': ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text"); 'template': string; 'templates': string[]; 'include': string[]; 'exclude': string[] }[] | undefined),
  /**
   * %config.translate_save_as_candidates%
   * @key `i18n-ally.translate.saveAsCandidates`
   * @default `false`
   * @type `boolean`
   */
  "translate.saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   * @key `i18n-ally.translate.fallbackToKey`
   * @default `false`
   * @type `boolean`
   */
  "translate.fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   * @key `i18n-ally.translate.engines`
   * @default `["google"]`
   * @type `array`
   */
  "translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   * @key `i18n-ally.translate.parallels`
   * @default `5`
   * @type `number`
   */
  "translate.parallels": number,
  /**
   * %config.prompt_translating_source%
   * @key `i18n-ally.translate.promptSource`
   * @default `false`
   * @type `boolean`
   */
  "translate.promptSource": boolean,
  /**
   * %config.translate_override_existing%
   * @key `i18n-ally.translate.overrideExisting`
   * @default `false`
   * @type `boolean`
   */
  "translate.overrideExisting": boolean,
  /**
   * %config.google_api_key%
   * @key `i18n-ally.translate.google.apiKey`
   * @default `null`
   * @type `string`
   */
  "translate.google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   * @key `i18n-ally.translate.deepl.apiKey`
   * @default `null`
   * @type `string`
   */
  "translate.deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   * @key `i18n-ally.translate.baidu.appid`
   * @default `null`
   * @type `string`
   */
  "translate.baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @key `i18n-ally.translate.baidu.apiSecret`
   * @default `null`
   * @type `string`
   */
  "translate.baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   * @key `i18n-ally.translate.deepl.enableLog`
   * @default `false`
   * @type `boolean`
   */
  "translate.deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @key `i18n-ally.translate.deepl.useFreeApiEntry`
   * @default `false`
   * @type `boolean`
   */
  "translate.deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   * @key `i18n-ally.translate.libre.apiRoot`
   * @default `"http://localhost:5000"`
   * @type `string`
   */
  "translate.libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   * @key `i18n-ally.translate.openai.apiKey`
   * @default `null`
   * @type `string`
   */
  "translate.openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @key `i18n-ally.translate.openai.apiRoot`
   * @default `"https://api.openai.com"`
   * @type `string`
   */
  "translate.openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   * @key `i18n-ally.translate.openai.apiModel`
   * @default `"gpt-3.5-turbo"`
   * @type `string`
   */
  "translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
  /**
   * %config.usage.scanning_ignore%
   * @key `i18n-ally.usage.scanningIgnore`
   * @default `undefined`
   * @type `array`
   */
  "usage.scanningIgnore": (string[] | undefined),
  /**
   * %config.derived_keys%
   * @key `i18n-ally.usage.derivedKeyRules`
   * @default `null`
   * @type `array`
   */
  "usage.derivedKeyRules": (string[] | null),
  /**
   * 
   * @key `i18n-ally.frameworks.ruby-rails.scopeRoot`
   * @default `"app/views"`
   * @type `string`
   */
  "frameworks.ruby-rails.scopeRoot": string,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.tsNodePath`
   * @default `"node_modules/ts-node/dist/bin.js"`
   * @type `string`
   */
  "parsers.typescript.tsNodePath": string,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.compilerOptions`
   * @default `{}`
   * @type `object`
   */
  "parsers.typescript.compilerOptions": Record<string, unknown>,
  /**
   * 
   * @key `i18n-ally.parsers.extendFileExtensions`
   * @default `{}`
   * @type `object`
   */
  "parsers.extendFileExtensions": Record<string, unknown>,
  /**
   * %config.review_enabled%
   * @key `i18n-ally.review.enabled`
   * @default `true`
   * @type `boolean`
   */
  "review.enabled": boolean,
  /**
   * %config.review_gutters%
   * @key `i18n-ally.review.gutters`
   * @default `true`
   * @type `boolean`
   */
  "review.gutters": boolean,
  /**
   * %config.review_username%
   * @key `i18n-ally.review.user.name`
   * @default `undefined`
   * @type `string`
   */
  "review.user.name": (string | undefined),
  /**
   * %config.review_email%
   * @key `i18n-ally.review.user.email`
   * @default `undefined`
   * @type `string`
   */
  "review.user.email": (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   * @key `i18n-ally.review.removeCommentOnResolved`
   * @default `false`
   * @type `boolean`
   */
  "review.removeCommentOnResolved": boolean,
  /**
   * %config.editor_prefer_editor%
   * @key `i18n-ally.editor.preferEditor`
   * @default `false`
   * @type `boolean`
   */
  "editor.preferEditor": boolean,
  /**
   * %config.keygen_strategy%
   * @key `i18n-ally.extract.keygenStrategy`
   * @default `"slug"`
   * @type `string`
   */
  "extract.keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   * @key `i18n-ally.extract.keygenStyle`
   * @default `"default"`
   * @type `string`
   */
  "extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   * @key `i18n-ally.extract.keyPrefix`
   * @default `""`
   * @type `string`
   */
  "extract.keyPrefix": string,
  /**
   * %config.key_max_length%
   * @key `i18n-ally.extract.keyMaxLength`
   * @default `null`
   * @type `number`
   */
  "extract.keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   * @key `i18n-ally.extract.targetPickingStrategy`
   * @default `"none"`
   * @type `string`
   */
  "extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.html`
   * @default `{}`
   * @type `object`
   */
  "extract.parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.babel`
   * @default `{}`
   * @type `object`
   */
  "extract.parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   * @key `i18n-ally.extract.autoDetect`
   * @default `false`
   * @type `boolean`
   */
  "extract.autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   * @key `i18n-ally.extract.ignored`
   * @default `undefined`
   * @type `array`
   */
  "extract.ignored": (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   * @key `i18n-ally.extract.ignoredByFiles`
   * @default `{}`
   * @type `object`
   */
  "extract.ignoredByFiles": Record<string, unknown>,
  /**
   * 
   * @key `i18n-ally.parserOptions`
   * @default `{}`
   * @type `object`
   */
  "parserOptions": Record<string, unknown>,
  /**
   * %config.default_namespace%
   * @key `i18n-ally.defaultNamespace`
   * @default `undefined`
   * @type `string`
   */
  "defaultNamespace": (string | undefined),
  /**
   * 
   * @key `i18n-ally.derivedKeyRules`
   * @default `undefined`
   * @type `undefined`
   */
  "derivedKeyRules": (unknown | undefined),
  /**
   * 
   * @key `i18n-ally.filenameMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  "filenameMatchRegex": (unknown | undefined),
  /**
   * 
   * @key `i18n-ally.fileNamespace`
   * @default `undefined`
   * @type `undefined`
   */
  "fileNamespace": (unknown | undefined),
  /**
   * 
   * @key `i18n-ally.keyMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  "keyMatchRegex": (unknown | undefined),
}

/**
 * defaults/scope of `i18n-ally` registed by `cnjimbo`
 */
const _i18nAlly = {
/**
 * scope: `i18n-ally`
 */
  scope: "i18n-ally",
/**
 * default values under `i18n-ally`
 */
  defaults: {
    "disabled": false,
    "autoDetection": true,
    "localesPaths": undefined,
    "encoding": "utf-8",
    "sourceLanguage": undefined,
    "displayLanguage": undefined,
    "ignoredLocales": undefined,
    "keystyle": undefined,
    "dirStructure": undefined,
    "annotations": true,
    "annotationInPlace": true,
    "annotationMaxLength": 40,
    "annotationDelimiter": "·",
    "includeSubfolders": true,
    "fullReloadOnChanged": false,
    "showFlags": true,
    "enabledFrameworks": undefined,
    "enabledParsers": undefined,
    "keysInUse": undefined,
    "sortKeys": false,
    "sortCompare": "binary",
    "sortLocale": undefined,
    "preferredDelimiter": "-",
    "readonly": false,
    "keepFulfilled": false,
    "localeCountryMap": {},
    "indent": 2,
    "disablePathParsing": false,
    "tabStyle": "space",
    "namespace": undefined,
    "pathMatcher": undefined,
    "languageTagSystem": "bcp47",
    "ignoreFiles": undefined,
    "theme.annotation": "rgba(153, 153, 153, .8)",
    "theme.annotationMissing": "rgba(153, 153, 153, .3)",
    "theme.annotationBorder": "rgba(153, 153, 153, .2)",
    "theme.annotationMissingBorder": "rgba(153, 153, 153, .2)",
    "regex.key": undefined,
    "regex.usageMatch": undefined,
    "regex.usageMatchAppend": undefined,
    "refactor.templates": undefined,
    "translate.saveAsCandidates": false,
    "translate.fallbackToKey": false,
    "translate.engines": ["google"],
    "translate.parallels": 5,
    "translate.promptSource": false,
    "translate.overrideExisting": false,
    "translate.google.apiKey": null,
    "translate.deepl.apiKey": null,
    "translate.baidu.appid": null,
    "translate.baidu.apiSecret": null,
    "translate.deepl.enableLog": false,
    "translate.deepl.useFreeApiEntry": false,
    "translate.libre.apiRoot": "http://localhost:5000",
    "translate.openai.apiKey": null,
    "translate.openai.apiRoot": "https://api.openai.com",
    "translate.openai.apiModel": "gpt-3.5-turbo",
    "usage.scanningIgnore": undefined,
    "usage.derivedKeyRules": null,
    "frameworks.ruby-rails.scopeRoot": "app/views",
    "parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "parsers.typescript.compilerOptions": {},
    "parsers.extendFileExtensions": {},
    "review.enabled": true,
    "review.gutters": true,
    "review.user.name": undefined,
    "review.user.email": undefined,
    "review.removeCommentOnResolved": false,
    "editor.preferEditor": false,
    "extract.keygenStrategy": "slug",
    "extract.keygenStyle": "default",
    "extract.keyPrefix": "",
    "extract.keyMaxLength": null,
    "extract.targetPickingStrategy": "none",
    "extract.parsers.html": {},
    "extract.parsers.babel": {},
    "extract.autoDetect": false,
    "extract.ignored": undefined,
    "extract.ignoredByFiles": {},
    "parserOptions": {},
    "defaultNamespace": undefined,
    "derivedKeyRules": undefined,
    "filenameMatchRegex": undefined,
    "fileNamespace": undefined,
    "keyMatchRegex": undefined,
  } satisfies I18nAlly,
}

/**
 * config objects of `i18n-ally` registed by `cnjimbo`
 */
export const i18nAllyConfigObject = defineConfigObject<I18nAlly>(
  _i18nAlly.scope,
  _i18nAlly.defaults
)


/**
 * configs of `i18n-ally` registed by `cnjimbo`
 */
export const i18nAllyConfigs = defineConfigs<I18nAlly>(
  _i18nAlly.scope,
  _i18nAlly.defaults
)


/**
 * Types of `i18n-ally.theme` registed by `cnjimbo`
 */
export interface I18nAllyTheme {
  /**
   * 
   * @key `i18n-ally.theme.annotation`
   * @default `"rgba(153, 153, 153, .8)"`
   * @type `string`
   */
  "annotation": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissing`
   * @default `"rgba(153, 153, 153, .3)"`
   * @type `string`
   */
  "annotationMissing": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  "annotationBorder": string,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissingBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  "annotationMissingBorder": string,
}

/**
 * defaults/scope of `i18n-ally.theme` registed by `cnjimbo`
 */
const _i18nAllyTheme = {
/**
 * scope: `i18n-ally.theme`
 */
  scope: "i18n-ally.theme",
/**
 * default values under `i18n-ally.theme`
 */
  defaults: {
    "annotation": "rgba(153, 153, 153, .8)",
    "annotationMissing": "rgba(153, 153, 153, .3)",
    "annotationBorder": "rgba(153, 153, 153, .2)",
    "annotationMissingBorder": "rgba(153, 153, 153, .2)",
  } satisfies I18nAllyTheme,
}

/**
 * config objects of `i18n-ally.theme` registed by `cnjimbo`
 */
export const i18nAllyThemeConfigObject = defineConfigObject<I18nAllyTheme>(
  _i18nAllyTheme.scope,
  _i18nAllyTheme.defaults
)


/**
 * configs of `i18n-ally.theme` registed by `cnjimbo`
 */
export const i18nAllyThemeConfigs = defineConfigs<I18nAllyTheme>(
  _i18nAllyTheme.scope,
  _i18nAllyTheme.defaults
)


/**
 * Types of `i18n-ally.regex` registed by `cnjimbo`
 */
export interface I18nAllyRegex {
  /**
   * %config.regex_key%
   * @key `i18n-ally.regex.key`
   * @default `undefined`
   * @type `string`
   */
  "key": (string | undefined),
  /**
   * %config.regex_usage_match%
   * @key `i18n-ally.regex.usageMatch`
   * @default `undefined`
   * @type `array`
   */
  "usageMatch": (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   * @key `i18n-ally.regex.usageMatchAppend`
   * @default `undefined`
   * @type `array`
   */
  "usageMatchAppend": (string[] | undefined),
}

/**
 * defaults/scope of `i18n-ally.regex` registed by `cnjimbo`
 */
const _i18nAllyRegex = {
/**
 * scope: `i18n-ally.regex`
 */
  scope: "i18n-ally.regex",
/**
 * default values under `i18n-ally.regex`
 */
  defaults: {
    "key": undefined,
    "usageMatch": undefined,
    "usageMatchAppend": undefined,
  } satisfies I18nAllyRegex,
}

/**
 * config objects of `i18n-ally.regex` registed by `cnjimbo`
 */
export const i18nAllyRegexConfigObject = defineConfigObject<I18nAllyRegex>(
  _i18nAllyRegex.scope,
  _i18nAllyRegex.defaults
)


/**
 * configs of `i18n-ally.regex` registed by `cnjimbo`
 */
export const i18nAllyRegexConfigs = defineConfigs<I18nAllyRegex>(
  _i18nAllyRegex.scope,
  _i18nAllyRegex.defaults
)


/**
 * Types of `i18n-ally.refactor` registed by `cnjimbo`
 */
export interface I18nAllyRefactor {
  /**
   * %config.refactor_templates%
   * @key `i18n-ally.refactor.templates`
   * @default `undefined`
   * @type `array`
   */
  "templates": ({ 'source': ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text"); 'template': string; 'templates': string[]; 'include': string[]; 'exclude': string[] }[] | undefined),
}

/**
 * defaults/scope of `i18n-ally.refactor` registed by `cnjimbo`
 */
const _i18nAllyRefactor = {
/**
 * scope: `i18n-ally.refactor`
 */
  scope: "i18n-ally.refactor",
/**
 * default values under `i18n-ally.refactor`
 */
  defaults: {
    "templates": undefined,
  } satisfies I18nAllyRefactor,
}

/**
 * config objects of `i18n-ally.refactor` registed by `cnjimbo`
 */
export const i18nAllyRefactorConfigObject = defineConfigObject<I18nAllyRefactor>(
  _i18nAllyRefactor.scope,
  _i18nAllyRefactor.defaults
)


/**
 * configs of `i18n-ally.refactor` registed by `cnjimbo`
 */
export const i18nAllyRefactorConfigs = defineConfigs<I18nAllyRefactor>(
  _i18nAllyRefactor.scope,
  _i18nAllyRefactor.defaults
)


/**
 * Types of `i18n-ally.translate` registed by `cnjimbo`
 */
export interface I18nAllyTranslate {
  /**
   * %config.translate_save_as_candidates%
   * @key `i18n-ally.translate.saveAsCandidates`
   * @default `false`
   * @type `boolean`
   */
  "saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   * @key `i18n-ally.translate.fallbackToKey`
   * @default `false`
   * @type `boolean`
   */
  "fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   * @key `i18n-ally.translate.engines`
   * @default `["google"]`
   * @type `array`
   */
  "engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   * @key `i18n-ally.translate.parallels`
   * @default `5`
   * @type `number`
   */
  "parallels": number,
  /**
   * %config.prompt_translating_source%
   * @key `i18n-ally.translate.promptSource`
   * @default `false`
   * @type `boolean`
   */
  "promptSource": boolean,
  /**
   * %config.translate_override_existing%
   * @key `i18n-ally.translate.overrideExisting`
   * @default `false`
   * @type `boolean`
   */
  "overrideExisting": boolean,
  /**
   * %config.google_api_key%
   * @key `i18n-ally.translate.google.apiKey`
   * @default `null`
   * @type `string`
   */
  "google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   * @key `i18n-ally.translate.deepl.apiKey`
   * @default `null`
   * @type `string`
   */
  "deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   * @key `i18n-ally.translate.baidu.appid`
   * @default `null`
   * @type `string`
   */
  "baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @key `i18n-ally.translate.baidu.apiSecret`
   * @default `null`
   * @type `string`
   */
  "baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   * @key `i18n-ally.translate.deepl.enableLog`
   * @default `false`
   * @type `boolean`
   */
  "deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @key `i18n-ally.translate.deepl.useFreeApiEntry`
   * @default `false`
   * @type `boolean`
   */
  "deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   * @key `i18n-ally.translate.libre.apiRoot`
   * @default `"http://localhost:5000"`
   * @type `string`
   */
  "libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   * @key `i18n-ally.translate.openai.apiKey`
   * @default `null`
   * @type `string`
   */
  "openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @key `i18n-ally.translate.openai.apiRoot`
   * @default `"https://api.openai.com"`
   * @type `string`
   */
  "openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   * @key `i18n-ally.translate.openai.apiModel`
   * @default `"gpt-3.5-turbo"`
   * @type `string`
   */
  "openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * defaults/scope of `i18n-ally.translate` registed by `cnjimbo`
 */
const _i18nAllyTranslate = {
/**
 * scope: `i18n-ally.translate`
 */
  scope: "i18n-ally.translate",
/**
 * default values under `i18n-ally.translate`
 */
  defaults: {
    "saveAsCandidates": false,
    "fallbackToKey": false,
    "engines": ["google"],
    "parallels": 5,
    "promptSource": false,
    "overrideExisting": false,
    "google.apiKey": null,
    "deepl.apiKey": null,
    "baidu.appid": null,
    "baidu.apiSecret": null,
    "deepl.enableLog": false,
    "deepl.useFreeApiEntry": false,
    "libre.apiRoot": "http://localhost:5000",
    "openai.apiKey": null,
    "openai.apiRoot": "https://api.openai.com",
    "openai.apiModel": "gpt-3.5-turbo",
  } satisfies I18nAllyTranslate,
}

/**
 * config objects of `i18n-ally.translate` registed by `cnjimbo`
 */
export const i18nAllyTranslateConfigObject = defineConfigObject<I18nAllyTranslate>(
  _i18nAllyTranslate.scope,
  _i18nAllyTranslate.defaults
)


/**
 * configs of `i18n-ally.translate` registed by `cnjimbo`
 */
export const i18nAllyTranslateConfigs = defineConfigs<I18nAllyTranslate>(
  _i18nAllyTranslate.scope,
  _i18nAllyTranslate.defaults
)


/**
 * Types of `i18n-ally.translate.google` registed by `cnjimbo`
 */
export interface I18nAllyTranslateGoogle {
  /**
   * %config.google_api_key%
   * @key `i18n-ally.translate.google.apiKey`
   * @default `null`
   * @type `string`
   */
  "apiKey": (string | null),
}

/**
 * defaults/scope of `i18n-ally.translate.google` registed by `cnjimbo`
 */
const _i18nAllyTranslateGoogle = {
/**
 * scope: `i18n-ally.translate.google`
 */
  scope: "i18n-ally.translate.google",
/**
 * default values under `i18n-ally.translate.google`
 */
  defaults: {
    "apiKey": null,
  } satisfies I18nAllyTranslateGoogle,
}

/**
 * config objects of `i18n-ally.translate.google` registed by `cnjimbo`
 */
export const i18nAllyTranslateGoogleConfigObject = defineConfigObject<I18nAllyTranslateGoogle>(
  _i18nAllyTranslateGoogle.scope,
  _i18nAllyTranslateGoogle.defaults
)


/**
 * configs of `i18n-ally.translate.google` registed by `cnjimbo`
 */
export const i18nAllyTranslateGoogleConfigs = defineConfigs<I18nAllyTranslateGoogle>(
  _i18nAllyTranslateGoogle.scope,
  _i18nAllyTranslateGoogle.defaults
)


/**
 * Types of `i18n-ally.translate.deepl` registed by `cnjimbo`
 */
export interface I18nAllyTranslateDeepl {
  /**
   * %config.deepl_api_key%
   * @key `i18n-ally.translate.deepl.apiKey`
   * @default `null`
   * @type `string`
   */
  "apiKey": (string | null),
  /**
   * %config.deepl_log%
   * @key `i18n-ally.translate.deepl.enableLog`
   * @default `false`
   * @type `boolean`
   */
  "enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @key `i18n-ally.translate.deepl.useFreeApiEntry`
   * @default `false`
   * @type `boolean`
   */
  "useFreeApiEntry": boolean,
}

/**
 * defaults/scope of `i18n-ally.translate.deepl` registed by `cnjimbo`
 */
const _i18nAllyTranslateDeepl = {
/**
 * scope: `i18n-ally.translate.deepl`
 */
  scope: "i18n-ally.translate.deepl",
/**
 * default values under `i18n-ally.translate.deepl`
 */
  defaults: {
    "apiKey": null,
    "enableLog": false,
    "useFreeApiEntry": false,
  } satisfies I18nAllyTranslateDeepl,
}

/**
 * config objects of `i18n-ally.translate.deepl` registed by `cnjimbo`
 */
export const i18nAllyTranslateDeeplConfigObject = defineConfigObject<I18nAllyTranslateDeepl>(
  _i18nAllyTranslateDeepl.scope,
  _i18nAllyTranslateDeepl.defaults
)


/**
 * configs of `i18n-ally.translate.deepl` registed by `cnjimbo`
 */
export const i18nAllyTranslateDeeplConfigs = defineConfigs<I18nAllyTranslateDeepl>(
  _i18nAllyTranslateDeepl.scope,
  _i18nAllyTranslateDeepl.defaults
)


/**
 * Types of `i18n-ally.translate.baidu` registed by `cnjimbo`
 */
export interface I18nAllyTranslateBaidu {
  /**
   * %config.baidu_appid%
   * @key `i18n-ally.translate.baidu.appid`
   * @default `null`
   * @type `string`
   */
  "appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @key `i18n-ally.translate.baidu.apiSecret`
   * @default `null`
   * @type `string`
   */
  "apiSecret": (string | null),
}

/**
 * defaults/scope of `i18n-ally.translate.baidu` registed by `cnjimbo`
 */
const _i18nAllyTranslateBaidu = {
/**
 * scope: `i18n-ally.translate.baidu`
 */
  scope: "i18n-ally.translate.baidu",
/**
 * default values under `i18n-ally.translate.baidu`
 */
  defaults: {
    "appid": null,
    "apiSecret": null,
  } satisfies I18nAllyTranslateBaidu,
}

/**
 * config objects of `i18n-ally.translate.baidu` registed by `cnjimbo`
 */
export const i18nAllyTranslateBaiduConfigObject = defineConfigObject<I18nAllyTranslateBaidu>(
  _i18nAllyTranslateBaidu.scope,
  _i18nAllyTranslateBaidu.defaults
)


/**
 * configs of `i18n-ally.translate.baidu` registed by `cnjimbo`
 */
export const i18nAllyTranslateBaiduConfigs = defineConfigs<I18nAllyTranslateBaidu>(
  _i18nAllyTranslateBaidu.scope,
  _i18nAllyTranslateBaidu.defaults
)


/**
 * Types of `i18n-ally.translate.libre` registed by `cnjimbo`
 */
export interface I18nAllyTranslateLibre {
  /**
   * %config.libretranslate_api_root%
   * @key `i18n-ally.translate.libre.apiRoot`
   * @default `"http://localhost:5000"`
   * @type `string`
   */
  "apiRoot": string,
}

/**
 * defaults/scope of `i18n-ally.translate.libre` registed by `cnjimbo`
 */
const _i18nAllyTranslateLibre = {
/**
 * scope: `i18n-ally.translate.libre`
 */
  scope: "i18n-ally.translate.libre",
/**
 * default values under `i18n-ally.translate.libre`
 */
  defaults: {
    "apiRoot": "http://localhost:5000",
  } satisfies I18nAllyTranslateLibre,
}

/**
 * config objects of `i18n-ally.translate.libre` registed by `cnjimbo`
 */
export const i18nAllyTranslateLibreConfigObject = defineConfigObject<I18nAllyTranslateLibre>(
  _i18nAllyTranslateLibre.scope,
  _i18nAllyTranslateLibre.defaults
)


/**
 * configs of `i18n-ally.translate.libre` registed by `cnjimbo`
 */
export const i18nAllyTranslateLibreConfigs = defineConfigs<I18nAllyTranslateLibre>(
  _i18nAllyTranslateLibre.scope,
  _i18nAllyTranslateLibre.defaults
)


/**
 * Types of `i18n-ally.translate.openai` registed by `cnjimbo`
 */
export interface I18nAllyTranslateOpenai {
  /**
   * %config.openai_api_key%
   * @key `i18n-ally.translate.openai.apiKey`
   * @default `null`
   * @type `string`
   */
  "apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @key `i18n-ally.translate.openai.apiRoot`
   * @default `"https://api.openai.com"`
   * @type `string`
   */
  "apiRoot": string,
  /**
   * %config.openai_api_model%
   * @key `i18n-ally.translate.openai.apiModel`
   * @default `"gpt-3.5-turbo"`
   * @type `string`
   */
  "apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * defaults/scope of `i18n-ally.translate.openai` registed by `cnjimbo`
 */
const _i18nAllyTranslateOpenai = {
/**
 * scope: `i18n-ally.translate.openai`
 */
  scope: "i18n-ally.translate.openai",
/**
 * default values under `i18n-ally.translate.openai`
 */
  defaults: {
    "apiKey": null,
    "apiRoot": "https://api.openai.com",
    "apiModel": "gpt-3.5-turbo",
  } satisfies I18nAllyTranslateOpenai,
}

/**
 * config objects of `i18n-ally.translate.openai` registed by `cnjimbo`
 */
export const i18nAllyTranslateOpenaiConfigObject = defineConfigObject<I18nAllyTranslateOpenai>(
  _i18nAllyTranslateOpenai.scope,
  _i18nAllyTranslateOpenai.defaults
)


/**
 * configs of `i18n-ally.translate.openai` registed by `cnjimbo`
 */
export const i18nAllyTranslateOpenaiConfigs = defineConfigs<I18nAllyTranslateOpenai>(
  _i18nAllyTranslateOpenai.scope,
  _i18nAllyTranslateOpenai.defaults
)


/**
 * Types of `i18n-ally.usage` registed by `cnjimbo`
 */
export interface I18nAllyUsage {
  /**
   * %config.usage.scanning_ignore%
   * @key `i18n-ally.usage.scanningIgnore`
   * @default `undefined`
   * @type `array`
   */
  "scanningIgnore": (string[] | undefined),
  /**
   * %config.derived_keys%
   * @key `i18n-ally.usage.derivedKeyRules`
   * @default `null`
   * @type `array`
   */
  "derivedKeyRules": (string[] | null),
}

/**
 * defaults/scope of `i18n-ally.usage` registed by `cnjimbo`
 */
const _i18nAllyUsage = {
/**
 * scope: `i18n-ally.usage`
 */
  scope: "i18n-ally.usage",
/**
 * default values under `i18n-ally.usage`
 */
  defaults: {
    "scanningIgnore": undefined,
    "derivedKeyRules": null,
  } satisfies I18nAllyUsage,
}

/**
 * config objects of `i18n-ally.usage` registed by `cnjimbo`
 */
export const i18nAllyUsageConfigObject = defineConfigObject<I18nAllyUsage>(
  _i18nAllyUsage.scope,
  _i18nAllyUsage.defaults
)


/**
 * configs of `i18n-ally.usage` registed by `cnjimbo`
 */
export const i18nAllyUsageConfigs = defineConfigs<I18nAllyUsage>(
  _i18nAllyUsage.scope,
  _i18nAllyUsage.defaults
)


/**
 * Types of `i18n-ally.frameworks` registed by `cnjimbo`
 */
export interface I18nAllyFrameworks {
  /**
   * 
   * @key `i18n-ally.frameworks.ruby-rails.scopeRoot`
   * @default `"app/views"`
   * @type `string`
   */
  "ruby-rails.scopeRoot": string,
}

/**
 * defaults/scope of `i18n-ally.frameworks` registed by `cnjimbo`
 */
const _i18nAllyFrameworks = {
/**
 * scope: `i18n-ally.frameworks`
 */
  scope: "i18n-ally.frameworks",
/**
 * default values under `i18n-ally.frameworks`
 */
  defaults: {
    "ruby-rails.scopeRoot": "app/views",
  } satisfies I18nAllyFrameworks,
}

/**
 * config objects of `i18n-ally.frameworks` registed by `cnjimbo`
 */
export const i18nAllyFrameworksConfigObject = defineConfigObject<I18nAllyFrameworks>(
  _i18nAllyFrameworks.scope,
  _i18nAllyFrameworks.defaults
)


/**
 * configs of `i18n-ally.frameworks` registed by `cnjimbo`
 */
export const i18nAllyFrameworksConfigs = defineConfigs<I18nAllyFrameworks>(
  _i18nAllyFrameworks.scope,
  _i18nAllyFrameworks.defaults
)


/**
 * Types of `i18n-ally.frameworks.ruby-rails` registed by `cnjimbo`
 */
export interface I18nAllyFrameworksRubyRails {
  /**
   * 
   * @key `i18n-ally.frameworks.ruby-rails.scopeRoot`
   * @default `"app/views"`
   * @type `string`
   */
  "scopeRoot": string,
}

/**
 * defaults/scope of `i18n-ally.frameworks.ruby-rails` registed by `cnjimbo`
 */
const _i18nAllyFrameworksRubyRails = {
/**
 * scope: `i18n-ally.frameworks.ruby-rails`
 */
  scope: "i18n-ally.frameworks.ruby-rails",
/**
 * default values under `i18n-ally.frameworks.ruby-rails`
 */
  defaults: {
    "scopeRoot": "app/views",
  } satisfies I18nAllyFrameworksRubyRails,
}

/**
 * config objects of `i18n-ally.frameworks.ruby-rails` registed by `cnjimbo`
 */
export const i18nAllyFrameworksRubyRailsConfigObject = defineConfigObject<I18nAllyFrameworksRubyRails>(
  _i18nAllyFrameworksRubyRails.scope,
  _i18nAllyFrameworksRubyRails.defaults
)


/**
 * configs of `i18n-ally.frameworks.ruby-rails` registed by `cnjimbo`
 */
export const i18nAllyFrameworksRubyRailsConfigs = defineConfigs<I18nAllyFrameworksRubyRails>(
  _i18nAllyFrameworksRubyRails.scope,
  _i18nAllyFrameworksRubyRails.defaults
)


/**
 * Types of `i18n-ally.parsers` registed by `cnjimbo`
 */
export interface I18nAllyParsers {
  /**
   * 
   * @key `i18n-ally.parsers.typescript.tsNodePath`
   * @default `"node_modules/ts-node/dist/bin.js"`
   * @type `string`
   */
  "typescript.tsNodePath": string,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.compilerOptions`
   * @default `{}`
   * @type `object`
   */
  "typescript.compilerOptions": Record<string, unknown>,
  /**
   * 
   * @key `i18n-ally.parsers.extendFileExtensions`
   * @default `{}`
   * @type `object`
   */
  "extendFileExtensions": Record<string, unknown>,
}

/**
 * defaults/scope of `i18n-ally.parsers` registed by `cnjimbo`
 */
const _i18nAllyParsers = {
/**
 * scope: `i18n-ally.parsers`
 */
  scope: "i18n-ally.parsers",
/**
 * default values under `i18n-ally.parsers`
 */
  defaults: {
    "typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "typescript.compilerOptions": {},
    "extendFileExtensions": {},
  } satisfies I18nAllyParsers,
}

/**
 * config objects of `i18n-ally.parsers` registed by `cnjimbo`
 */
export const i18nAllyParsersConfigObject = defineConfigObject<I18nAllyParsers>(
  _i18nAllyParsers.scope,
  _i18nAllyParsers.defaults
)


/**
 * configs of `i18n-ally.parsers` registed by `cnjimbo`
 */
export const i18nAllyParsersConfigs = defineConfigs<I18nAllyParsers>(
  _i18nAllyParsers.scope,
  _i18nAllyParsers.defaults
)


/**
 * Types of `i18n-ally.parsers.typescript` registed by `cnjimbo`
 */
export interface I18nAllyParsersTypescript {
  /**
   * 
   * @key `i18n-ally.parsers.typescript.tsNodePath`
   * @default `"node_modules/ts-node/dist/bin.js"`
   * @type `string`
   */
  "tsNodePath": string,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.compilerOptions`
   * @default `{}`
   * @type `object`
   */
  "compilerOptions": Record<string, unknown>,
}

/**
 * defaults/scope of `i18n-ally.parsers.typescript` registed by `cnjimbo`
 */
const _i18nAllyParsersTypescript = {
/**
 * scope: `i18n-ally.parsers.typescript`
 */
  scope: "i18n-ally.parsers.typescript",
/**
 * default values under `i18n-ally.parsers.typescript`
 */
  defaults: {
    "tsNodePath": "node_modules/ts-node/dist/bin.js",
    "compilerOptions": {},
  } satisfies I18nAllyParsersTypescript,
}

/**
 * config objects of `i18n-ally.parsers.typescript` registed by `cnjimbo`
 */
export const i18nAllyParsersTypescriptConfigObject = defineConfigObject<I18nAllyParsersTypescript>(
  _i18nAllyParsersTypescript.scope,
  _i18nAllyParsersTypescript.defaults
)


/**
 * configs of `i18n-ally.parsers.typescript` registed by `cnjimbo`
 */
export const i18nAllyParsersTypescriptConfigs = defineConfigs<I18nAllyParsersTypescript>(
  _i18nAllyParsersTypescript.scope,
  _i18nAllyParsersTypescript.defaults
)


/**
 * Types of `i18n-ally.review` registed by `cnjimbo`
 */
export interface I18nAllyReview {
  /**
   * %config.review_enabled%
   * @key `i18n-ally.review.enabled`
   * @default `true`
   * @type `boolean`
   */
  "enabled": boolean,
  /**
   * %config.review_gutters%
   * @key `i18n-ally.review.gutters`
   * @default `true`
   * @type `boolean`
   */
  "gutters": boolean,
  /**
   * %config.review_username%
   * @key `i18n-ally.review.user.name`
   * @default `undefined`
   * @type `string`
   */
  "user.name": (string | undefined),
  /**
   * %config.review_email%
   * @key `i18n-ally.review.user.email`
   * @default `undefined`
   * @type `string`
   */
  "user.email": (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   * @key `i18n-ally.review.removeCommentOnResolved`
   * @default `false`
   * @type `boolean`
   */
  "removeCommentOnResolved": boolean,
}

/**
 * defaults/scope of `i18n-ally.review` registed by `cnjimbo`
 */
const _i18nAllyReview = {
/**
 * scope: `i18n-ally.review`
 */
  scope: "i18n-ally.review",
/**
 * default values under `i18n-ally.review`
 */
  defaults: {
    "enabled": true,
    "gutters": true,
    "user.name": undefined,
    "user.email": undefined,
    "removeCommentOnResolved": false,
  } satisfies I18nAllyReview,
}

/**
 * config objects of `i18n-ally.review` registed by `cnjimbo`
 */
export const i18nAllyReviewConfigObject = defineConfigObject<I18nAllyReview>(
  _i18nAllyReview.scope,
  _i18nAllyReview.defaults
)


/**
 * configs of `i18n-ally.review` registed by `cnjimbo`
 */
export const i18nAllyReviewConfigs = defineConfigs<I18nAllyReview>(
  _i18nAllyReview.scope,
  _i18nAllyReview.defaults
)


/**
 * Types of `i18n-ally.review.user` registed by `cnjimbo`
 */
export interface I18nAllyReviewUser {
  /**
   * %config.review_username%
   * @key `i18n-ally.review.user.name`
   * @default `undefined`
   * @type `string`
   */
  "name": (string | undefined),
  /**
   * %config.review_email%
   * @key `i18n-ally.review.user.email`
   * @default `undefined`
   * @type `string`
   */
  "email": (string | undefined),
}

/**
 * defaults/scope of `i18n-ally.review.user` registed by `cnjimbo`
 */
const _i18nAllyReviewUser = {
/**
 * scope: `i18n-ally.review.user`
 */
  scope: "i18n-ally.review.user",
/**
 * default values under `i18n-ally.review.user`
 */
  defaults: {
    "name": undefined,
    "email": undefined,
  } satisfies I18nAllyReviewUser,
}

/**
 * config objects of `i18n-ally.review.user` registed by `cnjimbo`
 */
export const i18nAllyReviewUserConfigObject = defineConfigObject<I18nAllyReviewUser>(
  _i18nAllyReviewUser.scope,
  _i18nAllyReviewUser.defaults
)


/**
 * configs of `i18n-ally.review.user` registed by `cnjimbo`
 */
export const i18nAllyReviewUserConfigs = defineConfigs<I18nAllyReviewUser>(
  _i18nAllyReviewUser.scope,
  _i18nAllyReviewUser.defaults
)


/**
 * Types of `i18n-ally.editor` registed by `cnjimbo`
 */
export interface I18nAllyEditor {
  /**
   * %config.editor_prefer_editor%
   * @key `i18n-ally.editor.preferEditor`
   * @default `false`
   * @type `boolean`
   */
  "preferEditor": boolean,
}

/**
 * defaults/scope of `i18n-ally.editor` registed by `cnjimbo`
 */
const _i18nAllyEditor = {
/**
 * scope: `i18n-ally.editor`
 */
  scope: "i18n-ally.editor",
/**
 * default values under `i18n-ally.editor`
 */
  defaults: {
    "preferEditor": false,
  } satisfies I18nAllyEditor,
}

/**
 * config objects of `i18n-ally.editor` registed by `cnjimbo`
 */
export const i18nAllyEditorConfigObject = defineConfigObject<I18nAllyEditor>(
  _i18nAllyEditor.scope,
  _i18nAllyEditor.defaults
)


/**
 * configs of `i18n-ally.editor` registed by `cnjimbo`
 */
export const i18nAllyEditorConfigs = defineConfigs<I18nAllyEditor>(
  _i18nAllyEditor.scope,
  _i18nAllyEditor.defaults
)


/**
 * Types of `i18n-ally.extract` registed by `cnjimbo`
 */
export interface I18nAllyExtract {
  /**
   * %config.keygen_strategy%
   * @key `i18n-ally.extract.keygenStrategy`
   * @default `"slug"`
   * @type `string`
   */
  "keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   * @key `i18n-ally.extract.keygenStyle`
   * @default `"default"`
   * @type `string`
   */
  "keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   * @key `i18n-ally.extract.keyPrefix`
   * @default `""`
   * @type `string`
   */
  "keyPrefix": string,
  /**
   * %config.key_max_length%
   * @key `i18n-ally.extract.keyMaxLength`
   * @default `null`
   * @type `number`
   */
  "keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   * @key `i18n-ally.extract.targetPickingStrategy`
   * @default `"none"`
   * @type `string`
   */
  "targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.html`
   * @default `{}`
   * @type `object`
   */
  "parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.babel`
   * @default `{}`
   * @type `object`
   */
  "parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   * @key `i18n-ally.extract.autoDetect`
   * @default `false`
   * @type `boolean`
   */
  "autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   * @key `i18n-ally.extract.ignored`
   * @default `undefined`
   * @type `array`
   */
  "ignored": (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   * @key `i18n-ally.extract.ignoredByFiles`
   * @default `{}`
   * @type `object`
   */
  "ignoredByFiles": Record<string, unknown>,
}

/**
 * defaults/scope of `i18n-ally.extract` registed by `cnjimbo`
 */
const _i18nAllyExtract = {
/**
 * scope: `i18n-ally.extract`
 */
  scope: "i18n-ally.extract",
/**
 * default values under `i18n-ally.extract`
 */
  defaults: {
    "keygenStrategy": "slug",
    "keygenStyle": "default",
    "keyPrefix": "",
    "keyMaxLength": null,
    "targetPickingStrategy": "none",
    "parsers.html": {},
    "parsers.babel": {},
    "autoDetect": false,
    "ignored": undefined,
    "ignoredByFiles": {},
  } satisfies I18nAllyExtract,
}

/**
 * config objects of `i18n-ally.extract` registed by `cnjimbo`
 */
export const i18nAllyExtractConfigObject = defineConfigObject<I18nAllyExtract>(
  _i18nAllyExtract.scope,
  _i18nAllyExtract.defaults
)


/**
 * configs of `i18n-ally.extract` registed by `cnjimbo`
 */
export const i18nAllyExtractConfigs = defineConfigs<I18nAllyExtract>(
  _i18nAllyExtract.scope,
  _i18nAllyExtract.defaults
)


/**
 * Types of `i18n-ally.extract.parsers` registed by `cnjimbo`
 */
export interface I18nAllyExtractParsers {
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.html`
   * @default `{}`
   * @type `object`
   */
  "html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.babel`
   * @default `{}`
   * @type `object`
   */
  "babel": Record<string, unknown>,
}

/**
 * defaults/scope of `i18n-ally.extract.parsers` registed by `cnjimbo`
 */
const _i18nAllyExtractParsers = {
/**
 * scope: `i18n-ally.extract.parsers`
 */
  scope: "i18n-ally.extract.parsers",
/**
 * default values under `i18n-ally.extract.parsers`
 */
  defaults: {
    "html": {},
    "babel": {},
  } satisfies I18nAllyExtractParsers,
}

/**
 * config objects of `i18n-ally.extract.parsers` registed by `cnjimbo`
 */
export const i18nAllyExtractParsersConfigObject = defineConfigObject<I18nAllyExtractParsers>(
  _i18nAllyExtractParsers.scope,
  _i18nAllyExtractParsers.defaults
)


/**
 * configs of `i18n-ally.extract.parsers` registed by `cnjimbo`
 */
export const i18nAllyExtractParsersConfigs = defineConfigs<I18nAllyExtractParsers>(
  _i18nAllyExtractParsers.scope,
  _i18nAllyExtractParsers.defaults
)


/**
 * Types of `vue-i18n-ally` registed by `cnjimbo`
 */
export interface VueI18nAlly {
  /**
   * 
   * @key `vue-i18n-ally.localesPaths`
   * @default `undefined`
   * @type `undefined`
   */
  "localesPaths": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.encoding`
   * @default `undefined`
   * @type `undefined`
   */
  "encoding": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.sourceLanguage`
   * @default `undefined`
   * @type `undefined`
   */
  "sourceLanguage": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.displayLanguage`
   * @default `undefined`
   * @type `undefined`
   */
  "displayLanguage": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.ignoredLocales`
   * @default `undefined`
   * @type `undefined`
   */
  "ignoredLocales": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.keystyle`
   * @default `undefined`
   * @type `undefined`
   */
  "keystyle": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.dirStructure`
   * @default `undefined`
   * @type `undefined`
   */
  "dirStructure": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.annotations`
   * @default `undefined`
   * @type `undefined`
   */
  "annotations": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.annotationMaxLength`
   * @default `undefined`
   * @type `undefined`
   */
  "annotationMaxLength": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.annotationDelimiter`
   * @default `undefined`
   * @type `undefined`
   */
  "annotationDelimiter": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.filenameMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  "filenameMatchRegex": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.includeSubfolders`
   * @default `undefined`
   * @type `undefined`
   */
  "includeSubfolders": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.fullReloadOnChanged`
   * @default `undefined`
   * @type `undefined`
   */
  "fullReloadOnChanged": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.sortKeys`
   * @default `undefined`
   * @type `undefined`
   */
  "sortKeys": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.preferredDelimiter`
   * @default `undefined`
   * @type `undefined`
   */
  "preferredDelimiter": (unknown | undefined),
  /**
   * 
   * @key `vue-i18n-ally.readonly`
   * @default `undefined`
   * @type `undefined`
   */
  "readonly": (unknown | undefined),
}

/**
 * defaults/scope of `vue-i18n-ally` registed by `cnjimbo`
 */
const _vueI18nAlly = {
/**
 * scope: `vue-i18n-ally`
 */
  scope: "vue-i18n-ally",
/**
 * default values under `vue-i18n-ally`
 */
  defaults: {
    "localesPaths": undefined,
    "encoding": undefined,
    "sourceLanguage": undefined,
    "displayLanguage": undefined,
    "ignoredLocales": undefined,
    "keystyle": undefined,
    "dirStructure": undefined,
    "annotations": undefined,
    "annotationMaxLength": undefined,
    "annotationDelimiter": undefined,
    "filenameMatchRegex": undefined,
    "includeSubfolders": undefined,
    "fullReloadOnChanged": undefined,
    "sortKeys": undefined,
    "preferredDelimiter": undefined,
    "readonly": undefined,
  } satisfies VueI18nAlly,
}

/**
 * config objects of `vue-i18n-ally` registed by `cnjimbo`
 */
export const vueI18nAllyConfigObject = defineConfigObject<VueI18nAlly>(
  _vueI18nAlly.scope,
  _vueI18nAlly.defaults
)


/**
 * configs of `vue-i18n-ally` registed by `cnjimbo`
 */
export const vueI18nAllyConfigs = defineConfigs<VueI18nAlly>(
  _vueI18nAlly.scope,
  _vueI18nAlly.defaults
)

