/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand, useCommands } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = "cnjimbo.project-config"

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.change-annnotations"
  | "project-config.stop-watch"
  | "extension.emeraldwalk.enableRunOnSave"
  | "extension.emeraldwalk.disableRunOnSave"

export function useCommandBase(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(commandFullKey, callback)
}

export function useCommandsBase(commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void {
  return useCommands(commands)
}


/**
 * Update config now
 * @value `project-config.manualUpdate` identifier of the command 
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.manualUpdate", callback)
}

/**
 * change annotations
 * @value `project-config.change-annnotations` identifier of the command 
 */
export function useCommandChangeAnnnotations(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.change-annnotations", callback)
}

/**
 * stop watch
 * @value `project-config.stop-watch` identifier of the command 
 */
export function useCommandStopWatch(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.stop-watch", callback)
}

/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave` identifier of the command 
 */
export function useCommandExtensionEmeraldwalkEnableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandBase("extension.emeraldwalk.enableRunOnSave", callback)
}

/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave` identifier of the command 
 */
export function useCommandExtensionEmeraldwalkDisableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandBase("extension.emeraldwalk.disableRunOnSave", callback)
}


/**
 * Section Type of `project-config`
 */
export interface ProjectConfig {
  /**
   * Fetch and update the latest config automatically
   */
  "fileNestingUpdater.autoUpdate": boolean,
  /**
   * Should show up the prompt before doing auto update
   */
  "fileNestingUpdater.promptOnAutoUpdate": boolean,
  /**
   * The minimal interval for auto update, in minutes
   */
  "fileNestingUpdater.autoUpdateInterval": number,
  /**
   * The upstream repo you want to update from
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * The branch name of upstream repo
   */
  "fileNestingUpdater.upstreamBranch": string,
}

/**
 * Section Type of `project-config.fileNestingUpdater`
 */
export interface FileNestingUpdater {
  /**
   * Fetch and update the latest config automatically
   */
  "autoUpdate": boolean,
  /**
   * Should show up the prompt before doing auto update
   */
  "promptOnAutoUpdate": boolean,
  /**
   * The minimal interval for auto update, in minutes
   */
  "autoUpdateInterval": number,
  /**
   * The upstream repo you want to update from
   */
  "upstreamRepo": string,
  /**
   * The branch name of upstream repo
   */
  "upstreamBranch": string,
}

/**
 * Section Type of `emeraldwalk`
 */
export interface Emeraldwalk {
  "runonsave": {
      /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    'autoClearConsole': boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    'shell'?: string
    /**
     * 
     * @default `undefined`
     */
    'commands'?: {
              /**
         * Regex for matching files to run commands on 
         * 
         * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
         * 
         * e.g.
         * "match": "some\\\\directory\\\\.*"
         * @default `".*"`
         */
        'match': string
        /**
         * Regex for matching files *not* to run commands on.
         * @default `".*"`
         */
        'notMatch': string
        /**
         * Command to execute on save.
         * @default `"echo ${file}"`
         */
        'cmd': string
        /**
         * Run command asynchronously.
         * @default `false`
         */
        'isAsync': boolean 
      }[] 
  },
}

const projectConfigConfig = {

  /**
   * Section defaults of `project-config`
   */
  "project-config": {
    /**
     * Fetch and update the latest config automatically
     */
    "fileNestingUpdater.autoUpdate": true,
    /**
     * Should show up the prompt before doing auto update
     */
    "fileNestingUpdater.promptOnAutoUpdate": true,
    /**
     * The minimal interval for auto update, in minutes
     */
    "fileNestingUpdater.autoUpdateInterval": 4320,
    /**
     * The upstream repo you want to update from
     */
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    /**
     * The branch name of upstream repo
     */
    "fileNestingUpdater.upstreamBranch": "main",
  } satisfies ProjectConfig as ProjectConfig,


  /**
   * Section defaults of `project-config.fileNestingUpdater`
   */
  "project-config.fileNestingUpdater": {
    /**
     * Fetch and update the latest config automatically
     */
    "autoUpdate": true,
    /**
     * Should show up the prompt before doing auto update
     */
    "promptOnAutoUpdate": true,
    /**
     * The minimal interval for auto update, in minutes
     */
    "autoUpdateInterval": 4320,
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": "antfu/vscode-file-nesting-config",
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": "main",
  } satisfies FileNestingUpdater as FileNestingUpdater,


  /**
   * Section defaults of `emeraldwalk`
   */
  "emeraldwalk": {
    "runonsave": { "autoClearConsole": false, "shell": undefined, "commands": undefined },
  } satisfies Emeraldwalk as Emeraldwalk,

}
export type ConfigKey = "project-config" | "project-config.fileNestingUpdater" | "emeraldwalk"

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}
    
/**
 * ConfigObject of `project-config`
 * @example
 * const oldVal = configObjectProjectConfig.fileNestingUpdater.autoUpdate //get value 
 * configObjectProjectConfig.$update("fileNestingUpdater.autoUpdate", oldVal) //update value
 */
export const configObjectProjectConfig = useConfigObject("project-config")
/**
 * ToConfigRefs of `project-config`
 * @example
 * const oldVal:boolean =configProjectConfig.fileNestingUpdater.autoUpdate.value //get value 
 * configProjectConfig.fileNestingUpdater.autoUpdate.update(oldVal) //update value
 */
export const configProjectConfig = useConfig("project-config")
/**
 * ConfigObject of `project-config.fileNestingUpdater`
 * @example
 * const oldVal = configObjectFileNestingUpdater.autoUpdate //get value 
 * configObjectFileNestingUpdater.$update("autoUpdate", oldVal) //update value
 */
export const configObjectFileNestingUpdater = useConfigObject("project-config.fileNestingUpdater")
/**
 * ToConfigRefs of `project-config.fileNestingUpdater`
 * @example
 * const oldVal:boolean =configFileNestingUpdater.autoUpdate.value //get value 
 * configFileNestingUpdater.autoUpdate.update(oldVal) //update value
 */
export const configFileNestingUpdater = useConfig("project-config.fileNestingUpdater")
/**
 * ConfigObject of `emeraldwalk`
 * @example
 * const oldVal = configObjectEmeraldwalk.runonsave //get value 
 * configObjectEmeraldwalk.$update("runonsave", oldVal) //update value
 */
export const configObjectEmeraldwalk = useConfigObject("emeraldwalk")
/**
 * ToConfigRefs of `emeraldwalk`
 * @example
 * const oldVal:object =configEmeraldwalk.runonsave.value //get value 
 * configEmeraldwalk.runonsave.update(oldVal) //update value
 */
export const configEmeraldwalk = useConfig("emeraldwalk")
