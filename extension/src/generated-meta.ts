/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, } from 'reactive-vscode';
export const publisher = "cnjimbo";
export const name = "project-kit";
export const version = "1.1.2";
export const displayName = "Project Kit";
export const description = "Export current settings to workspace config file ";
export const extensionId = "cnjimbo.project-kit";
/**
 * Type union of all commands
 */
export type CommandKey = "project-kit.manualUpdate" | "project-kit.change-annnotations" | "project-kit.stop-watch" | "extension.emeraldwalk.enableRunOnSave" | "extension.emeraldwalk.disableRunOnSave";
/**
 * Commands map registed by `cnjimbo.project-kit`
 */
export const commands = {
    /**
     * Update config now
     * @value `project-kit.manualUpdate`
     */
    manualUpdate: "project-kit.manualUpdate",
    /**
     * change annotations
     * @value `project-kit.change-annnotations`
     */
    changeAnnnotations: "project-kit.change-annnotations",
    /**
     * stop watch
     * @value `project-kit.stop-watch`
     */
    stopWatch: "project-kit.stop-watch",
    /**
     * Run On Save: Enable
     * @value `extension.emeraldwalk.enableRunOnSave`
     */
    enableRunOnSave: "extension.emeraldwalk.enableRunOnSave",
    /**
     * Run On Save: Disable
     * @value `extension.emeraldwalk.disableRunOnSave`
     */
    disableRunOnSave: "extension.emeraldwalk.disableRunOnSave",
} satisfies Record<string, CommandKey>;
export function useCommand(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
    return useReactiveCommand(commandFullKey, callback);
}
export function useCommands(commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void {
    return useReactiveCommands(commands);
}
type NameType = typeof name | typeof displayName | typeof extensionId;
export function useLogger(loggerName: NameType = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) {
    return useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
}
export function useOutputChannel(outputName: NameType = displayName ?? name ?? extensionId) {
    return useReactiveOutputChannel(outputName);
}
/**
 * Update config now
 * @value `project-kit.manualUpdate` identifier of the command
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
    return useCommand(commands.manualUpdate, callback);
}
/**
 * change annotations
 * @value `project-kit.change-annnotations` identifier of the command
 */
export function useCommandChangeAnnnotations(callback: (...args: any[]) => any) {
    return useCommand(commands.changeAnnnotations, callback);
}
/**
 * stop watch
 * @value `project-kit.stop-watch` identifier of the command
 */
export function useCommandStopWatch(callback: (...args: any[]) => any) {
    return useCommand(commands.stopWatch, callback);
}
/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave` identifier of the command
 */
export function useCommandEnableRunOnSave(callback: (...args: any[]) => any) {
    return useCommand(commands.enableRunOnSave, callback);
}
/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave` identifier of the command
 */
export function useCommandDisableRunOnSave(callback: (...args: any[]) => any) {
    return useCommand(commands.disableRunOnSave, callback);
}
/**
 * Section Type of `project-kit`
 */
export interface ProjectKit {
    /**
     * Fetch and update the latest config automatically
     */
    "fileNestingUpdater.autoUpdate": boolean;
    /**
     * The upstream repo you want to update from
     */
    "fileNestingUpdater.upstreamRepo": string;
    /**
     * The branch name of upstream repo
     */
    "fileNestingUpdater.upstreamBranch": string;
    /**
     * Should show up the prompt before doing auto update
     */
    "fileNestingUpdater.promptOnAutoUpdate": boolean;
    /**
     * The minimal interval for auto update, in minutes
     */
    "fileNestingUpdater.autoUpdateInterval": number;
    "emeraldwalk.runonsave": {
        /**
       * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
       * @default `undefined`
       */
        'shell'?: string;
        /**
         *
         * @default `undefined`
         */
        'commands'?: {
            /**
       * Command to execute on save.
       * @default `"echo ${file}"`
       */
            'cmd': string;
            /**
             * Regex for matching files to run commands on
             *
             * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
             *
             * e.g.
             * "match": "some\\\\directory\\\\.*"
             * @default `".*"`
             */
            'match': string;
            /**
             * Run command asynchronously.
             * @default `false`
             */
            'isAsync': boolean;
            /**
             * Regex for matching files *not* to run commands on.
             * @default `".*"`
             */
            'notMatch': string;
        }[];
        /**
         * Automatically clear the console on each save before running commands.
         * @default `false`
         */
        'autoClearConsole': boolean;
    };
}
/**
 * Section Type of `project-kit.fileNestingUpdater`
 */
export interface FileNestingUpdater {
    /**
     * Fetch and update the latest config automatically
     */
    "autoUpdate": boolean;
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": string;
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": string;
    /**
     * Should show up the prompt before doing auto update
     */
    "promptOnAutoUpdate": boolean;
    /**
     * The minimal interval for auto update, in minutes
     */
    "autoUpdateInterval": number;
}
/**
 * Section Type of `project-kit.emeraldwalk`
 */
export interface Emeraldwalk {
    "runonsave": {
        /**
       * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
       * @default `undefined`
       */
        'shell'?: string;
        /**
         *
         * @default `undefined`
         */
        'commands'?: {
            /**
       * Command to execute on save.
       * @default `"echo ${file}"`
       */
            'cmd': string;
            /**
             * Regex for matching files to run commands on
             *
             * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
             *
             * e.g.
             * "match": "some\\\\directory\\\\.*"
             * @default `".*"`
             */
            'match': string;
            /**
             * Run command asynchronously.
             * @default `false`
             */
            'isAsync': boolean;
            /**
             * Regex for matching files *not* to run commands on.
             * @default `".*"`
             */
            'notMatch': string;
        }[];
        /**
         * Automatically clear the console on each save before running commands.
         * @default `false`
         */
        'autoClearConsole': boolean;
    };
}
const projectKitConfig = {
    /**
     * Section defaults of `project-kit`
     */
    "project-kit": {
        /**
         * Fetch and update the latest config automatically
         */
        "fileNestingUpdater.autoUpdate": true,
        /**
         * The upstream repo you want to update from
         */
        "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
        /**
         * The branch name of upstream repo
         */
        "fileNestingUpdater.upstreamBranch": "main",
        /**
         * Should show up the prompt before doing auto update
         */
        "fileNestingUpdater.promptOnAutoUpdate": true,
        /**
         * The minimal interval for auto update, in minutes
         */
        "fileNestingUpdater.autoUpdateInterval": 4320,
        "emeraldwalk.runonsave": { "shell": undefined, "commands": undefined, "autoClearConsole": false },
    } satisfies ProjectKit as ProjectKit,
    /**
     * Section defaults of `project-kit.fileNestingUpdater`
     */
    "project-kit.fileNestingUpdater": {
        /**
         * Fetch and update the latest config automatically
         */
        "autoUpdate": true,
        /**
         * The upstream repo you want to update from
         */
        "upstreamRepo": "antfu/vscode-file-nesting-config",
        /**
         * The branch name of upstream repo
         */
        "upstreamBranch": "main",
        /**
         * Should show up the prompt before doing auto update
         */
        "promptOnAutoUpdate": true,
        /**
         * The minimal interval for auto update, in minutes
         */
        "autoUpdateInterval": 4320,
    } satisfies FileNestingUpdater as FileNestingUpdater,
    /**
     * Section defaults of `project-kit.emeraldwalk`
     */
    "project-kit.emeraldwalk": {
        "runonsave": { "shell": undefined, "commands": undefined, "autoClearConsole": false },
    } satisfies Emeraldwalk as Emeraldwalk,
};
export type ConfigKey = "project-kit" | "project-kit.fileNestingUpdater" | "project-kit.emeraldwalk";
export function useConfig<K extends ConfigKey>(section: K) {
    return defineConfigs<typeof projectKitConfig[K]>(section, projectKitConfig[section]);
}
export function useConfigObject<K extends ConfigKey>(section: K) {
    return defineConfigObject<typeof projectKitConfig[K]>(section, projectKitConfig[section]);
}
/**
 * ConfigObject of `project-kit`
 * @example
 * const oldVal = configObjectProjectKit.fileNestingUpdater.autoUpdate //get value
 * configObjectProjectKit.$update("fileNestingUpdater.autoUpdate", oldVal) //update value
 */
export const configObjectProjectKit = useConfigObject("project-kit");
/**
 * ToConfigRefs of `project-kit`
 * @example
 * const oldVal:boolean =configProjectKit.fileNestingUpdater.autoUpdate.value //get value
 * configProjectKit.fileNestingUpdater.autoUpdate.update(oldVal) //update value
 */
export const configProjectKit = useConfig("project-kit");
/**
 * ConfigObject of `project-kit.fileNestingUpdater`
 * @example
 * const oldVal = configObjectFileNestingUpdater.autoUpdate //get value
 * configObjectFileNestingUpdater.$update("autoUpdate", oldVal) //update value
 */
export const configObjectFileNestingUpdater = useConfigObject("project-kit.fileNestingUpdater");
/**
 * ToConfigRefs of `project-kit.fileNestingUpdater`
 * @example
 * const oldVal:boolean =configFileNestingUpdater.autoUpdate.value //get value
 * configFileNestingUpdater.autoUpdate.update(oldVal) //update value
 */
export const configFileNestingUpdater = useConfig("project-kit.fileNestingUpdater");
/**
 * ConfigObject of `project-kit.emeraldwalk`
 * @example
 * const oldVal = configObjectEmeraldwalk.runonsave //get value
 * configObjectEmeraldwalk.$update("runonsave", oldVal) //update value
 */
export const configObjectEmeraldwalk = useConfigObject("project-kit.emeraldwalk");
/**
 * ToConfigRefs of `project-kit.emeraldwalk`
 * @example
 * const oldVal:object =configEmeraldwalk.runonsave.value //get value
 * configEmeraldwalk.runonsave.update(oldVal) //update value
 */
export const configEmeraldwalk = useConfig("project-kit.emeraldwalk");
